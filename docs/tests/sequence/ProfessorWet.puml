@startuml ProfessorWet
header Professor gets wet
hide footbox

participant Student as "student : Student"
participant Sponge as "sponge : Sponge"
participant Inventory as "studentInventory : Inventory"
participant Room as "room1 : Room"
participant Professor as "professor : Professor"
-> Student++ : use(sponge)
Student -> Sponge++ : use(student)

create RoomEffect as "wetEffect : WetEffect"
Sponge --> RoomEffect: <<create>>
activate RoomEffect
create itemFinders as "itemFinders : List<ItemFinder>"
RoomEffect --> itemFinders: <<create>>
deactivate RoomEffect
Sponge -> Room++: addEffect(wetEffect)
Room -> Student++: acceptEffect(wetEffect, itemFinders)
Student -> RoomEffect++: applyEffect(student)

return
return

Room -> Professor++: acceptEffect(wetEffect, itemFinders)
Professor -> RoomEffect++: applyEffect(professor)
create State as "stunnedStep : StunnedStep"
RoomEffect --> State: <<create>>
RoomEffect -> Professor++: setActionState(stunnedStep)
' Van-e itt setNextState? Vagy az hogy működik, vagy mi? xd
return
return
return


return
return
return


@enduml