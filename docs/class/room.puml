@startuml Room
skinparam classAttributeIconSize 0

'Inventory ----------------------------------------
class Inventory {
    - size : int

    - isFull(): boolean
    + addItem(item: Item): boolean
    + removeItem(item: Item): Item
    + dropAll(target: Room): void

    + acceptVisitor(visitor: ItemVisitor): void
}

Inventory "1" -- "0..*" Item

' azért asszociáció, mivel ettől még az item-nek van egyedi léte

Actor *--"1" Inventory
Room *-- "1" Inventory


abstract class Actor {

}

class Room {
    - capacity : int
    - isSticky : boolean

    + split() : void
    + merge(room: Room) : void
    + attack(attacker: Actor): void
    + addEffect(effect: RoomEffect) : void
    + removeEffect(effect: RoomEffect) : void
    
    + enter(actor: Actor) : boolean
    + leave(actor: Actor) : void
    + revive(): boolean
    - isFull() : boolean

    + addItem(item: Item) : void
    + removeItem(item: Item) : Item
    + close(actor: Actor) : void
    + clean() : boolean
    + tick() : void
}

class Door {
    - remainingInvisibility : int
    - isOneway : boolean

    + hide(duration: int) : void
    + leadsTo(from: Room) : Room
    + move(actor: Actor, target: Room) : boolean
    + tick() : void
}

Room "1" -- "0..*" Actor 
Room "2" -- "1..*" Door
Room "1" -- "0..*" RoomEffect

interface IHasLocation {
    + getLocation(): Room
}

IHasLocation <|.. Room
IHasLocation <|.. Actor

'Effect -------------------------------------------
abstract class RoomEffect {
    - timeLeft : int
    + tick(): boolean
    + addEffect(Actor actor) : void
    + {abstract} clean(): boolean

    + {abstract} applyEffect(professor: Professor) : void
    + {abstract} applyEffect(student: Student) : void
    + {abstract} applyEffect(janitor: Janitor) : void
    + {abstract} copy() : RoomEffect
}
' tick returns false when the effect expires

RoomEffect "1" -- "0..*" ItemFinder
RoomEffect <|-- WetEffect
RoomEffect <|-- GasEffect
RoomEffect <|-- StickyEffect

class WetEffect {
    + applyEffect(professor: Professor) : void
    + applyEffect(student: Student) : void
    + applyEffect(janitor: Janitor) : void
    + copy() : RoomEffect
    + clean(): boolean
}

class GasEffect {
    + applyEffect(professor: Professor) : void
    + applyEffect(student: Student) : void
    + applyEffect(janitor: Janitor) : void
    + copy() : RoomEffect
    + clean(): boolean
}

class StickyEffect {
    - visitant : List<Actor>
    - checkLimit() : boolean
    + applyEffect(professor: Professor) : void
    + applyEffect(student: Student) : void
    + applyEffect(janitor: Janitor) : void
    + copy() : RoomEffect
    + clean(): boolean
}

'State --------------------------------------------

abstract class ItemFinder<T extends Item> {

}
