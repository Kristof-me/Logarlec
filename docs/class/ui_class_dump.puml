@startuml NewClassDiagram
skinparam classAttributeIconSize 0

' JUST FOR RENDERING PURPOSES. DON'T HAVE STRUCTURAL MEANING!!!!!!!!
package View{
    class ItemPanel{}
    class PlayerPanel{}
}


/' 
###############################################################
########################---MODEL---#############################
###############################################################
 '/
package Model{
    class BeerDefense{}
    class StunnedStep{}
    class Inventory{}
    class Student{}
    class Professor{}
    class Janitor{}
    interface IActions{}
    abstract class ActionState{}
    abstract class RoomEffect{}
    abstract class DefenseStrategy{}
    abstract class Actor{}
    class Room{
        - id: int
        - {static} nextId: int
        }
    abstract class Item{}
    class Transistor{}
    abstract class ItemVisitor{}

    GameObject *--"0..*" View: views
    abstract class GameObject{
        + addListener(view: View): void
        + removeListener(view: View): void
        + update(): void
        + {abstract} createOwnView(): View
    }

    GameObject <|-- ActionState
    GameObject <|-- DefenseStrategy
    GameObject <|-- Actor
    GameObject <|-- Inventory
    GameObject <|-- Item
    GameObject <|-- Room
    GameObject <|-- RoomEffect
    GameObject <|-- Door

}


/' 
###############################################################
#####################---CONTROL---##########################
###############################################################
 '/
package Controller{

    MapManager *--"0..*" Room: rooms
    MapManager *--"1" Room: solution
    class MapManager {
        -height: int
        -width: int
        -excessDoorChance: double
        -oneWayDoorChance: double
        -itemSpawnChance: double
        -fakeItemChance: double
        -constructors: Constructor[]
        +MapManager(h: int, w: int)
        +mergeRooms(): void
        +splitRoom(): void
        -generateMap(height: int, width: int): List<Room>
        -BFS(map: Room[][], visited: boolean[][], x: int, y: int): void
        -addExcessDoors(map: Room[][], x: int, y: int): void
        -hasWay(a: Room, b: Room): boolean
        -addItems(map: Room[][]): void
        -spawnSliderule(map: Room[][]): Room
    }

    GameManager *--"1" MapManager: mapManager
    GameManager *--"0..*" Player: students
    GameManager *--"0..*" ProfessorAI: professors
    GameManager *--"0..*" JanitorAI: janitors
    GameManager *--"0..*" Room: rooms
    class GameManager{
        - MERGE_PERCENT: int
        - SPLIT_PERCENT: int
        - currentTick: int
        - anySlidRulePickedUp: boolean
        - playerIterator: Iterator<Player>
        turnLatch: CountDownLatch

        + isWon(): boolean
        + isGameOver(): boolean
        + reset(): void
        + addPlayer(player: Player): void
        + addPlayer(professor: ProfessorAI): void
        + addPlayer(janitor: JanitorAI): void
        + slideRulePickedUp(): void
        + startGame(): void
        + getStepCount(): long
        + takeStep(): void
        + playTurn(): void
        + aiTurn(): void
        + getTick(): int
    }

    IActions <|-- Controller
    Controller *--"1" Actor: actor: T
    abstract class Controller<T extends Actor>{
        + {abstract} getActor(): Actor
        + {abstract} takeTurn(): void
        + attack(): void
        + move(door: Door): void
        + use(item: Item): void
        + pickUp(item: Item): boolean
        + drop(item Item): void
    }

    Controller <|-- JanitorAI
    JanitorAI *--"1" Janitor: actor
    class JanitorAI{}

    Controller <|-- Player
    Player *--"1" Student: actor
    class Player{
        + skipTurn(): void
        + move(door: Door): void
        + use(item: Item): void
        + pickUp(item: Item): boolean
        + drop(item Item): void
    }

    Controller <|-- ProfessorAI
    ProfessorAI *--"1" Professor: actor
    class ProfessorAI{}

    'rendering
    package Rendering{
        class DoorViewFactory{
            + createDoorView(door: Door): DoorPanel
        }

        class EffectViewFactory {
            +createPanel(defenseStrategy: DefenseStrategy): EffectPanel
            +createPanel(gasEffect: GasEffect): EffectPanel
            +createPanel(wetEffect: WetEffect): EffectPanel
            +createPanel(stickyEffect: StickyEffect): EffectPanel
            +createPanel(stunnedStep: StunnedStep): EffectPanel
        }

        ItemHolderViewFactory *--"1" RoomPanel: autoPlaceTo
        class ItemHolderViewFactory {
            -studentViews: HashMap<Student, PlayerPanel>
            -roomViews: HashMap<Room, RoomPanel>
            +setAutoPlacement(target: RoomPanel): void
            +createMenuPanel(student: Student): PlayerPanel
            +createPanel(student: Student): ActorPanel
            +createPanel(janitor: Janitor): ActorPanel
            +createPanel(professor: Professor): ActorPanel
            +createPanel(room: Room): RoomPanel
        }

        ItemVisitor <|-- ItemViewFactory
        ItemViewFactory *--"1" ItemPanel: panel
        class ItemViewFactory {
            +createPanel(item: Item): ItemPanel<? extends Item>
            +visit(airFreshener: AirFreshener): void
            +visit(beer: Beer): void
            +visit(cocktail: Cocktail): void
            +visit(camembert: Camembert): void
            +visit(fakeItem: FakeItem): void
            +visit(gasMask: GasMask): void
            +visit(slideRule: SlideRule): void
            +visit(sponge: Sponge): void
            +visit(transistor: Transistor): void
            +visit(tvsz: Tvsz): void
        }
    }

}

/' 
###############################################################
########################---VIEW---#############################
###############################################################
 '/
package View{
    'elements
        JButton <|-- CustomButton
        class CustomButton{
            - action : Consumer<ActionEvent>
            - background : Color
            - highlightColor : Color
            - hasAnimation : boolean

            + setExpectedSize(size: Dimension): void
            - onClickAnimation(event: ActionEvent): void
            + setHighlight(highlight: boolean): void
            + setHasAnimation(hasAnimation: boolean): void
            + setBackground(color: Color): void
            + setHighlightColor(color: Color): void
        }

        DefaultButtomModel <|-- CustomButtonState
        class CustomButtonState {
            +isPressed(): boolean
            +isRollover(): boolean
            +setRollover(b: boolean): void
        }

        BasicScrollBarUI <|-- ScrollUI
        class ScrollUI {
            #createDecreaseButton(orientation: int): JButton
            #createIncreaseButton(orientation: int): JButton
            -createZeroButton(): JButton
        }
    'frames

    JFrame <|-- GameFrame
    PlayerPanel *--"1" GameFrame: playerPanel
    RoomPanel *--"1" GameFrame: roomPanel
    class GameFrame{
        + setPlayerPanel(playerPanel: PlayerPanel): void
    }

    JFrame <|-- MenuFrame
    MenuFrame *--"0..*" Player: players
    class MenuFrame{
        + deletePlayer(player: Player, panel: MenuPlayerPanel): void
    }

    'observerviews
    JPanel <|-- View
    abstract class View{
        + {abstract} updateView(): void
    }

    'panels

    View <|-- ActorPanel
    ActorPanel *--"1" Actor: actor
    class ActorPanel{}

    EffectPanel <|-- DefenseStrategyPanel
    DefenseStrategyPanel *--"1" DefenseStrategy: beerDefense
    class DefenseStrategyPanel{}

    JPanel <|-- DoorListPanel
    class DoorListPanel{
        + addDoor(doorPanel: Jpanel): void
    }

    View <|-- DoorPanel
    DoorPanel *--"1" Door: door
    DoorPanel *--"1" Room: room
    DoorPanel *--"1" CustomButton: btn
    class DoorPanel{
        + bindRoom(room: Room): void
    }

    View <|-- EffectListPanel
    EffectListPanel *--"1" Student: student
    EffectListPanel *--"1" Room: room
    class EffectListPanel{
        + bindStudent(student: Student): void
        + addEffect(effectPanel: EffectPanel): void
        + removeEffect(effectPanel: EffectPanel): void
        + reset():void
        + redraw():void
    }

    View <|-- EffectPanel
    abstract class EffectPanel{
        - turnsLabel: JLabel
        # setTurnsLeft(turnsleft: int): void
    }

    JPanel <|-- EmptyItemPanel

    View <|-- InventoryPanel
    InventoryPanel *--"1" Inventory: inventory
    class InventoryPanel{
        - drawItems(): void
    }

    View <|-- ItemPanel
    ItemPanel *--"1" Item: item: T
    class ItemPanel<T extends Item>{
        # item: T
        # icon: String
        # usesLeft: JLabel
        # iconLabel: JLabel
        # popupMenu: JPopupMenu
        # setActorPopupMenu(): void
        # setRoomPopupMenu(): void
    }

    JPanel <|-- MenuPlayerPanel
    MenuPlayerPanel *--"1" Player: player
    MenuPlayerPanel *--"1" MenuFrame: menu
    class MenuPlayerPanel{
        - drawBorder(): void
    }

    View <|-- PlayerPanel
    PlayerPanel *--"1" Student: viewedPlayer
    PlayerPanel *--"1" Player: viewedPlayer
    class PlayerPanel{
        # nameLabel: JLabel
        + bindPlayer(player: Player): void
    }

    EffectPanel <|-- RoomEffectPanel
    RoomEffectPanel *--"1" RoomEffect: effect
    class RoomEffectPanel{}

    View <|-- RoomPanel
    RoomPanel *--"1" Room: viewedRoom
    RoomPanel *--"0..*" DoorListPanel: doorLists
    class RoomPanel{
        - layout: BorderLayout
        - roomInfo: JPanel
        - actors: JPanel[]
        - scrollLists: JScrollPane[]
        + addStudentView(studentPanel: ActorPanel): void
        + addProfessorView(professorPanel: ActorPanel): void
        + addJanitorView(janitorPanel: ActorPanel): void
        - createDoorScrollPane(i: int): JScrollPane
        - replaceCenter(panel: JPanel): void
    }

    EffectPanel <|-- StunnedStrategyPanel
    StunnedStrategyPanel *--"1" StunnedStep: stunnedStep
    class StunnedStrategyPanel{}

    ItemPanel <|-- TransistorPanel
    class TransistorPanel{
        # paintComponent(g: Graphics): void
    }



    'utility
    class ColorGenerator{
        + random(): Color
        + fromHash(hash1: int, hash2: int): Color
        + getForegroundColor(backgroundColor: Color): Color
    }

    class IconLoader{
        icons: HashMap<Strint, Image>
        - path: String
        + getImage(name: String, scale: int): Image
        + getIcon(name: String, scale: int): ImageIcon
    }

    class ThemeManager{
        # PRIMARY: Color
        # PRIMARY_LIGHT: Color
        # ACCENT: Color
        # BACKGROUND: Color
        # SCROLL: Color
        # TRACK: Color
        # TEXT: Color
        # TEXT_DARK: Color
        # BUTTON: Color
        # FONT: Font
        # FONT_SIZE: int
        - colorFrom(hex: String): Color
        - setContainerStyle():
        - setButtonStyle():
        - setLabelStyle():
        - setScrollStyle():
        - setTextFieldStyle():
        + loadTheme(): void
    }
}
@enduml