@startuml classDiagram
skinparam classAttributeIconSize 0

'Items --------------------------------------------
abstract class Item {
    - usesLeft : int

    + use(invoker: Actor): void
    + getUsesLeft() : int
    
    + onPickup(actor: Actor): void
    + onDrop(room: Room): void
    
    + {abstract} accept(visitor: ItemVisitor): void
}

class Sponge {
    + use(invoker: Actor): void
    + accept(visitor: ItemVisitor): void
}

class Tvsz {
    + use(invoker: Actor): void
    + accept(visitor: ItemVisitor): void
}

class SlideRule {
    + onPickup(actor: Actor) : void
    + accept(visitor: ItemVisitor): void
}

class Beer {
    + use(invoker: Actor): void
    + accept(visitor: ItemVisitor): void
}

class Cocktail {
    + use(invoker: Actor): void
    + accept(visitor: ItemVisitor): void
}

class GasMask {
    + use(invoker: Actor): void
    + accept(visitor: ItemVisitor): void
}

class Transistor {
    - pair: Transistor
    - location: IHasLocation
    + use(invoker: Actor): void
    + pairWith(pair : Transistor) : void
    + onDrop(room: Room) : void

    + accept(visitor: ItemVisitor): void
}

class Camembert {
    + use(invoker: Actor): void
    + accept(visitor: ItemVisitor): void
}

class AirFreshener {
    + use(invoker: Actor): void
    + accept(visitor: ItemVisitor): void
}

class FakeItem {
    - itemToFake: Item
    + use(invoker: Actor): void
    + accept(visitor: ItemVisitor): void
}

Item <|-- Sponge
Item <|-- Tvsz
Item <|-- SlideRule
Item <|-- Beer
Item <|-- Cocktail
Item <|-- GasMask
Item <|-- Transistor
Item <|-- Camembert
Item <|-- AirFreshener
Item <|-- FakeItem

'Inventory ----------------------------------------
class Inventory {
    - size : int

    - isFull(): boolean
    + addItem(item: Item): boolean
    + removeItem(item: Item): Item
    + dropAll(target: Room): void

    + acceptVisitor(visitor: ItemVisitor): void
}

Inventory "1" -- "0..*" Item

' azért asszociáció, mivel ettől még az item-nek van egyedi léte

Actor *--"1" Inventory
Room *-- "1" Inventory

'Character ----------------------------------------

abstract class Actor {
    - alive : boolean

    + {abstract} attacked() : void
    + {abstract} revive() : boolean
    + {abstract} acceptEffect(effect: RoomEffect, unless: List<ItemFinder>) : void

    + {abstract}setDefaultActionState() : void
    + setActionState(state: ActionState) : void
    + setDefenseStrategy(defenseStrategy: DefenseStrategy) : void

    + teleport(room: Room, isForced: boolean) : boolean
    + getInventory() : Inventory
    + dropAllTo(room: Room) : void
    + tick() : void
}

Actor -- "1" ActionState
Actor -- "1" DefenseStrategy

class Student {
    + attacked() : void
    + revive() : boolean
    + acceptEffect(effect: RoomEffect, unless: List<ItemFinder>) : void
    + setDefaultActionState() : void
}

Actor <|-- Student

class Professor {
    + attacked() : void
    + revive() : boolean
    + acceptEffect(effect: RoomEffect, unless: List<ItemFinder>) : void
    + setDefaultActionState() : void
}
Actor <|-- Professor

class Janitor {
    + attacked() : void
    + revive() : boolean
    + acceptEffect(effect: RoomEffect, unless: List<ItemFinder>) : void
    + setDefaultActionState() : void
}
Actor <|-- Janitor

'ez egy kísérleti dolog - szedd ki, ha nem tetszik

'Room ---------------------------------------------

class Room {
    - capacity : int
    - isSticky : boolean

    + split() : void
    + merge(room: Room) : void
    + attack(attacker: Actor): void
    + addEffect(effect: RoomEffect) : void
    + removeEffect(effect: RoomEffect) : void
    
    + enter(actor: Actor, isForced: boolean) : boolean
    + leave(actor: Actor) : void
    + revive(): boolean
    - isFull() : boolean

    + addItem(item: Item) : void
    + removeItem(item: Item) : Item
    + clean() : boolean
    + tick() : void
}

class Door {
    - remainingInvisibility : int
    - isOneway : boolean

    + hide(duration: int) : void
    + leadsTo(from: Room) : Room
    + move(actor: Actor, target: Room) : boolean
    + tick() : void
}

Room "1" -- "0..*" Actor 
Room "2" -- "1..*" Door
Room "1" -- "0..*" RoomEffect

interface IHasLocation {
    + getLocation(): Room
}

IHasLocation <|.. Room
IHasLocation <|.. Actor

'Effect -------------------------------------------
abstract class RoomEffect {
    - timeLeft : int
    + tick(): boolean
    + addEffect(Actor actor) : void
    + {abstract} clean(): boolean

    + {abstract} applyEffect(professor: Professor) : void
    + {abstract} applyEffect(student: Student) : void
    + {abstract} applyEffect(janitor: Janitor) : void
}
' tick returns false when the effect expires

RoomEffect "1" -- "0..*" ItemFinder
RoomEffect <|-- WetEffect
RoomEffect <|-- GasEffect
RoomEffect <|-- StickyEffect

class WetEffect {
    + applyEffect(professor: Professor) : void
    + applyEffect(student: Student) : void
    + applyEffect(janitor: Janitor) : void
    + clean(): boolean
}

class GasEffect {
    + applyEffect(professor: Professor) : void
    + applyEffect(student: Student) : void
    + applyEffect(janitor: Janitor) : void
    + clean(): boolean
}

class StickyEffect {
    - visitant : List<Actor>
    - checkLimit() : boolean
    + applyEffect(professor: Professor) : void
    + applyEffect(student: Student) : void
    + applyEffect(janitor: Janitor) : void
    + clean(): boolean
}

'State --------------------------------------------
interface IActions {
    + attack() : void
    + move(door: Door) : boolean
    + use(item: Item) : void
    + pickUp(item: Item) : boolean
    + drop(item: Item) : void
}

IActions <|.. Actor
IActions <|.. ActionState

abstract class ActionState {
    + tick() : boolean
    + {abstract} setNextState(state: ActionState) : ActionState
}

class StudentActions {
    + attack() : void
}

StudentActions --|> ActionState

class ProfessorActions {
    + attack() : void
}
ProfessorActions --|> ActionState
class JanitorActions {
    + attack() : void
    + move(door: Door) : boolean
}
JanitorActions --|> ActionState


class StunnedStep {
    - remainingTime : int

    + tick() : boolean
    + attack() : void
    + move(door: Door) : boolean
    + use(item: Item) : void
    + pickUp(item: Item) : boolean
    + drop(item: Item) : void
}

StunnedStep --|> ActionState

'Strategy -----------------------------------
abstract class DefenseStrategy {
    + tick() : boolean
    + defend(inventory: Inventory) : boolean
}

class DefaultDefense {
    + defend(inventory: Inventory) : boolean
}

class BeerDefense {
    - remaining : int
    + defend(inventory: Inventory) : boolean
    + tick() : boolean
}

' false-t ad vissza, ha már lejár

DefenseStrategy <|-- DefaultDefense
DefenseStrategy <|-- BeerDefense

'Visitors ----------------------------------------
abstract class ItemVisitor {
    + visit(sponge: Sponge) : void
    + visit(tvsz: Tvsz) : void
    + visit(slideRule: SlideRule) : void
    + visit(beer: Beer) : void
    + visit(cocktail: Cocktail) : void
    + visit(gasMask: GasMask) : void
    + visit(transistor: Transistor) : void
    + visit(camembert: Camembert) : void
    + visit(airFreshener: AirFreshener) : void
}

ItemVisitor ..> Item

abstract class ItemFinder<T extends Item> {
    # potentialItems : List<T>
    + findIn(inventory: Inventory): T
}

ItemFinder --|> ItemVisitor

class TransistorPairFinder {
    + visit(transistor: Transistor) : void
}

class BestGasMaskFinder {
    + visit(gasMask: GasMask) : void
}

class BestTvszFinder {
    + visit(tvsz: Tvsz) : void
}   

ItemFinder <|-- TransistorPairFinder
ItemFinder <|-- BestGasMaskFinder
ItemFinder <|-- BestTvszFinder

' dependency
'Transistor ..> IHasLocation

@enduml